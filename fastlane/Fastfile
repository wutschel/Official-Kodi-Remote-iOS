fastlane_require 'xcodeproj'

$scheme = 'Kodi Remote'

default_platform(:ios)

before_all do
  ensure_bundle_exec
  ensure_git_status_clean
  skip_docs
  app_store_connect_api_key(
    key_id: "AX6GU8LT6K",
    issuer_id: "69a6de97-a91c-47e3-e053-5b8c7c11a4d1",
    key_filepath: "AuthKey_AX6GU8LT6K.p8",
    in_house: false,
  ) unless is_ci?
end

after_all do
  clean_build_artifacts
end

error do
  clean_build_artifacts
end

desc 'Build the app on PR'
lane :build_pr do |options|
  config = 'Release'
  artifactsPath = "#{Dir.pwd}/build_artifacts"
  buildApp(
    ["SYMROOT='#{artifactsPath}'"],
    configuration: config,
    skip_archive: true,
    skip_codesigning: true,
  )

  # ensure that SwiftUI framework isn't linked
  executablePath = "#{artifactsPath}/#{config}-iphoneos/#{$scheme}.app/#{$scheme}"
  hasSwiftUI = system("otool -L '#{executablePath}' | fgrep SwiftUI.framework")
  UI.build_failure! 'SwiftUI framework is linked, this is unexpected' if hasSwiftUI
end

desc 'Build & upload to Testflight'
lane :tf do |options|
  buildApp

  # ignore commit messages that contain '[not app]'
  changelogLines = []
  lastTag = last_git_tag
  changelog_from_git_commits(
    between: [lastTag, 'HEAD'],
    pretty: '%b (%s)',
    merge_commit_filtering: 'only_include_merges',
  ).each_line(chomp: true) { |l|
    changelogLines << "- #{l.sub(/\(Merge pull request (#\d+).+/, "(\\1)")}" unless l.include?('[not app]')
  }
  Actions.lane_context[SharedValues::FL_CHANGELOG] = changelogLines.join("\n")
  Actions.lane_context[SharedValues::FL_CHANGELOG].prepend "#{options[:changelogTitle]}\n\n" if options[:changelogTitle]

  testflight(
    distribute_external: true,
    groups: ['external testers'],
    notify_external_testers: options[:notify] != '0',
  )

  # create prerelease on Github
  next unless ENV['GITHUB_API_TOKEN']

  xcArchivePath = lane_context[SharedValues::XCODEBUILD_ARCHIVE]
  appProperties = get_info_plist_value(
    key: 'ApplicationProperties',
    path: "#{xcArchivePath}/Info.plist",
  )

  betaSuffix = '-b'
  if (betaIndex = lastTag.rindex(betaSuffix))
    afterBetaIndex = betaIndex + betaSuffix.length
    lastBetaNumber = lastTag[afterBetaIndex, 3] # max number = 999
    betaVersion = lastBetaNumber.to_i + 1
  else
    betaVersion = 1
  end
  newTag = appProperties['CFBundleShortVersionString'] + betaSuffix + betaVersion.to_s

  # delete codesigning-related stuff
  appPath = "#{xcArchivePath}/Products/#{appProperties['ApplicationPath']}"
  system "find '#{appPath}' \\( -name embedded.mobileprovision -or -name _CodeSignature \\) -exec rm -rf {} +"

  # pack ipa
  Dir.mktmpdir { |tempDir|
    ipaPath = "#{tempDir}/#{$scheme} #{newTag} #{sh('git rev-parse --short HEAD').strip}.ipa"
    FileUtils.cd(tempDir) {      
      payloadDir = 'Payload'
      Dir.mkdir payloadDir
      FileUtils.move appPath, payloadDir
      system "zip -qr '#{ipaPath}' '#{payloadDir}'"
    }

    # create GitHub release with the ipa
    createGithubRelease("Testflight #{appProperties['CFBundleVersion']}", newTag, is_prerelease: true, assets: [ipaPath])
    system 'git fetch --tags'
  }
end

desc 'Build RC & upload to Testflight'
lane :rc do |options|
  # remove unsupported languages from the settings bundle
  localizationDirExtension = '.lproj'
  xcProject = Xcodeproj::Project.open('../Kodi Remote.xcodeproj')
  localizations = xcProject.files
    .filter {|f| f.path.end_with? 'Localizable.strings' }
    .map {|f| f.name.downcase }
  settingsBundlePath = xcProject.files.find {|f| f.path.end_with? 'Settings.bundle' }.real_path
  Dir.each_child(settingsBundlePath) { |f|
    next unless File.extname(f) == localizationDirExtension
    FileUtils.remove_dir "#{settingsBundlePath}/#{f}" unless localizations.include? File.basename(f, localizationDirExtension).downcase
  }

  begin
    tf options.merge({
      changelogTitle: 'This RC will be submitted for AppStore review.',
    })
  ensure
    reset_git_repo(
      files: [settingsBundlePath],
      force: true,
    )
  end
end

desc 'Submit to AppStore review'
lane :asc do |options|
  appVersion = options[:app_version]
  buildNumber = options[:build_number]
  appstore(
    app_version: appVersion,
    build_number: buildNumber,
    skip_binary_upload: true,
    skip_screenshots: true,
    force: true,
    submit_for_review: true,
    reject_if_possible: true,
    automatic_release: options[:manual_release] != '1',
    precheck_include_in_app_purchases: false,
  )

  # draft release on Github
  next unless ENV['GITHUB_API_TOKEN']
  releaseName = options[:release_name]
  releaseName ||= UI.input "Please enter Github release name: " if UI.interactive?
  releaseName = releaseName&.strip
  next if releaseName.nil? || releaseName.empty?

  unless appVersion && buildNumber
    app_store_build_number(live: false, version: appVersion)
    appVersion ||= lane_context[SharedValues::LATEST_VERSION]
    buildNumber ||= lane_context[SharedValues::LATEST_BUILD_NUMBER]
  end
  releaseNotes = File.read(File.join(FastlaneCore::FastlaneFolder.path, 'metadata/en-US/release_notes.txt'))
  createGithubRelease(releaseName, appVersion, "Build #{buildNumber}\n\n#{releaseNotes}", is_draft: true)
end


def createGithubRelease(name, tag, description = nil, is_draft: false, is_prerelease: false, assets: nil)
  ghRelease = set_github_release(
    repository_name: 'xbmc/Official-Kodi-Remote-iOS',
    tag_name: tag,
    name: name,
    description: description,
    is_draft: is_draft,
    is_prerelease: is_prerelease,
    upload_assets: assets,
  )
  UI.message JSON.pretty_generate(ghRelease)
end

def buildApp(xcargs = [], gym_options = {})
  xcodes(select_for_current_build_only: true)
  gym(
    scheme: $scheme,
    clean: true,
    output_directory: 'build',
    include_symbols: true,
    include_bitcode: false,
    export_method: 'app-store',
    xcargs: "#{xcargs.join(' ')} CURRENT_PROJECT_VERSION=#{number_of_commits}",
    **gym_options
  )
end
